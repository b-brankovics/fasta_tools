#!/usr/bin/perl -w
use strict;

#===DESCRIPTION=================================================================
# A tool to get sequence length information for FASTA files

my $description = 
    "Description:\n\tA tool to get sequence length information for FASTA files\n";
my $usage = 
    "Usage:\n\t$0 [Options] [FASTA file | -]\n";
my $options = 
    "Options:\n" .
    "\t-h | --help\n\t\tPrint the help message; ignore other arguments.\n" .
    "\t-e\n\t\tPrint the sequence length for each entry and the total length.\n" .
    "\t-o\n\t\tPrint the sequence length for each entry.\n" .
    "\n";
#===MAIN========================================================================

# Print help if needed
&print_help(@ARGV);

# Process the arguments
#   Check whether individual length are needed or not "-e"
#   Check whether only individual length is needed "-o"
my $do_each;
my $no_total;
my @temp;
for (@ARGV) {
    if ($_ eq "-e") {
        $do_each++
    } elsif ($_ eq "-o"){
        $do_each++;
        $no_total++;
    } else {
        push @temp, $_
    }
}
# If one is selected then do_each is true
#   Remove these from the file list
@ARGV = @temp if $do_each;

# Hash to store the sequences: key (id and defintion) and value (sequence) 
my %fas_data;
# Array to store the order of the sequences
my @ids;

# If there were arguments specified then read the sequence from them
# OR read from STDIN
if (@ARGV) {
    for (@ARGV) {
	&read_fasta(\%fas_data, \@ids, $_);
    }
} else {
    &read_fasta(\%fas_data, \@ids);
}

# Print the length to STDOUT according to the mode selected
# Get the lengths
#   Array to store the sequences lengths
my $total;
for (@ids) {
    my $len = length $fas_data{$_};
    $total += $len;
    print ">$_\n$len\n" if $do_each;
}
print "$total\n" unless $no_total;



#===SUBROUTINES=================================================================

sub print_help {
    # Print out the usage to STDERR
    # Takes in the @ARGV as input
    my @args = @_;
    for (@args) {
	if (/^-?-h(elp)?$/) {
	    die "$usage\n$description\n$options";
	}
    }
}

sub read_fasta {
    # Convert FASTA string into a hash with IDs for keys and sequences
    #  as values and stores the original order in an array
    # This subroutine requires three arguments:
	#	1) filehandle for the FASTA file
	#	2) a hash reference to store the sequences in
	#	3) an array reference to store the IDs in the same
	#          order as the original file 
    # If an ID line is present multiple times then a warning is printed
    #  to STDERR
    my ($hash, $list, $file) = @_;
    # Use STDIN if file is '-'
    $file = undef if $file && $file eq '-';
    my $in;
    if ($file && -e $file) {
	open $in, '<', $file || die $!;
    } else {
	$in = *STDIN;
    }
    # Store the sequence id
    my $seq_id;
    for (<$in>) {
        # Remove line endings
        s/\R//g;
	# Skip empty lines
	next if /^\s*$/;
	# Check wheter it is an id line
	if (/>(.*)/) {
	    # Save the id and the definition and store it in the array
	    $seq_id = $1;
	    print {*STDERR} "WARNING: <$seq_id> is present in multiple copies\n" if $hash->{$seq_id};
	    push @$list, $seq_id;
	} else {
	    # If there was no id lines before this then throw an error
	    unless (defined $seq_id) {
		print "Format error in FASTA file! Check the file!\n";
		last;
	    }
	    # Remove white space
	    s/\s+//g;
	    # Add to the sequence
	    $hash->{$seq_id} .= $_;
	}
    }
    close $in;
}
