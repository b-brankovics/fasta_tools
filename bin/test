#!/usr/bin/perl -w
use strict;

# POD: Plain Old Documentation block
=pod

=head3 fasta_pretty

A tool to format FASTA files to uniform column width (60).

=head4 Synopsis

    fasta_pretty [OPTIONS] [FILE]...

=head4 Options

=over 12

=item B<-h> | B<--help>

Print the help message; ignore other arguments.

=back

=head4 Input

STDIN and/or FASTA files.
The extention of the files is irrelevant.

=head4 Output

The output is FASTA format with 60 line length for the sequence. 
The program prints to STDOUT.
This can be captured in a file by using the C<E<gt>> or C<E<gt>E<gt>> operator.

=head4 Examples

Format a single file (C<input.fas>) and save it to a file (C<output.fas>).

    fasta_pretty input.fas >output.fas
    cat input.fas | fasta_pretty >output.fas
    cat input.fas | fasta_pretty - >output.fas

Format and concatenate three FASTA files from the current directory
(C<input1.fas>, C<input2.fas> and C<input3.fas>) and save it to a file (C<output.fas>).

    fasta_pretty input1.fas input2.fas input3.fas >output.fas
    fasta_pretty input*.fas >output.fas
    cat input2.fas | fasta_pretty input1.fas - input3.fas >output.fas


=cut

#===DESCRIPTION=================================================================


my $description = 
    "Description:\n\tA tool to format fasta files to uniform column width (60)\n";
my $usage = 
    "Usage:\n\t$0 [-h | --help] [FASTA file | -]\n";
my $options = 
    "Options:\n" .
    "\t-h | --help\n\t\tPrint the help message; ignore other arguments.\n" .
    "\n";
#===MAIN========================================================================

# Hash to store the sequences: key (id and defintion) and value (sequence) 
my %fas_data;
# Array to store the order of the sequences
my @ids;

# Print help if needed
&print_help(@ARGV);

# If there were arguments specified then read the sequence from them
# OR read from STDIN
if (@ARGV) {
    for (@ARGV) {
	&read_fasta(\%fas_data, \@ids, $_);
    }
} else {
    &read_fasta(\%fas_data, \@ids);
}

# Print the sequences to STDOUT
&print_fasta(\%fas_data, \@ids);

#===SUBROUTINES=================================================================

sub print_help {
    # Print out the usage to STDERR
    # Takes in the @ARGV as input
    my @args = @_;
    for (@args) {
	if (/-?-h(elp)?/) {
	    die "$usage\n$description\n$options";
	}
    }
}

sub read_fasta {
    # Convert FASTA string into a hash with IDs for keys and sequences
    #  as values and stores the original order in an array
    # This subroutine requires three arguments:
	#	1) filehandle for the FASTA file
	#	2) a hash reference to store the sequences in
	#	3) an array reference to store the IDs in the same
	#          order as the original file 
    # If an ID line is present multiple times then a warning is printed
    #  to STDERR
    my ($hash, $list, $file) = @_;
    # Use STDIN if file is '-'
    $file = undef if $file && $file eq '-';
    my $in;
    if ($file && -e $file) {
	open $in, '<', $file || die $!;
    } else {
	$in = *STDIN;
    }
    # Store the sequence id
    my $seq_id;
    for (<$in>) {
        # Remove line endings
        s/\R//g;
	# Skip empty lines
	next if /^\s*$/;
	# Check wheter it is an id line
	if (/>(.*)/) {
	    # Save the id and the definition and store it in the array
	    $seq_id = $1;
	    print {*STDERR} "WARNING: <$seq_id> is present in multiple copies\n" if $hash->{$seq_id};
	    push @$list, $seq_id;
	} else {
	    # If there was no id lines before this then throw an error
	    unless (defined $seq_id) {
		print "Format error in FASTA file! Check the file!\n";
		last;
	    }
	    # Remove white space
	    s/\s+//g;
	    # Add to the sequence
	    $hash->{$seq_id} .= $_;
	}
    }
    close $in;
}

sub to_fasta {
    # Return a fasta formated string
    my ($seq_name, $seq, $len) = @_;
    # default to 60 characters of sequence per line
    $len = 60 unless $len;
    # Print ID line
    my $formatted_seq = ">$seq_name\n";
    # Add sequence lines with $len length
    while (my $chunk = substr($seq, 0, $len, "")) {
	$formatted_seq .= "$chunk\n";
    }
    return $formatted_seq;
}

sub print_fasta {
    # Print all the sequences to STDOUT in FASTA format
    my ($hash, $list) = @_;
    for (@$list) {
	print &to_fasta($_, $hash->{$_});
    }
}
