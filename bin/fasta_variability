#!/usr/bin/perl -w
use strict;

#===DESCRIPTION=================================================================
# A tool to measure sequence variability of aligned sequences in multi
#  FASTA format files 

my $description = 
    "Description:\n\t" .
    "A tool to measure sequence variability of aligned sequences\n" .
    " in multi FASTA format files\n";
my $usage = 
    "Usage:\n\t$0 [-h | --help] [FASTA file | -]\n";
my $options = 
    "Options:\n" .
    "\t-h | --help\n\t\tPrint the help message; ignore other arguments.\n" .
    "\n";
#===MAIN========================================================================

# Hash to store the sequences: key (id and defintion) and value (sequence) 
my %fas_data;
# Array to store the order of the sequences
my @ids;

# Print help if needed
&print_help(@ARGV);

# If there were arguments specified then read the sequence from them
# OR read from STDIN
if (@ARGV) {
    for (@ARGV) {
	&read_fasta(\%fas_data, \@ids, $_);
    }
} else {
    &read_fasta(\%fas_data, \@ids);
}


# Check that the sequences have the same length
my $total = length $fas_data{$ids[0]};
die "ERROR: Not all the sequences have the same length! The sequences are not aligned.\n" if grep{length($fas_data{$_}) != $total} @ids;

# Measure the genetic variability
my $var = 0;  # Number of variable characters
my $pi = 0;   # Number of parsimony informative sites
# Excluding characters that have gap character state
my $gvar = 0; # Number of variable characters
my $gpi = 0;  # Number of parsimony informative sites
for my $p (1..$total) {
    $p--;
    # Store all the character states and their count in a hash
    my %char;
    for my $id (@ids) {
	$char{substr($fas_data{$id}, $p, 1)}++;
    }
    # More than one chracter state => variable
    if (scalar(keys %char) > 1) {
	$var++;
	$gvar++ if scalar(grep{$_ ne "-"} keys %char) > 1;
	$pi++ if scalar(grep{$char{$_} > 1} keys %char) > 1;
	$gpi++ if scalar(grep{$char{$_} > 1} grep{$_ ne "-"} keys %char) > 1;
    }    
}

# Format results for percentage printing
my $pvar = sprintf("%.2f", $var / $total * 100);
my $ppi = sprintf("%.2f", $pi / $total * 100);

my $pgvar = sprintf("%.2f", $gvar / $total * 100);
my $pgpi = sprintf("%.2f", $gpi / $total * 100);

# Print the output
printf "total:\t%8s\n", $total;

printf "var:\t%8s\t%6s", $var, $pvar;      print "%\n";
printf "PI:\t%8s\t%6s", $pi, $ppi;         print "%\n";

printf "gapvar:\t%8s\t%6s", $gvar, $pgvar; print "%\n";
printf "gapPI:\t%8s\t%6s", $gpi, $pgpi;    print "%\n";

print "CSV format: total, var, PI, var(%), PI(%), gapvar, gapPI, gapvar(%), gapPI(%)\n";
print join(",", $total, $var, $pi, $pvar, $ppi, $gvar, $gpi, $pgvar, $pgpi), "\n";


#===SUBROUTINES=================================================================

sub print_help {
    # Print out the usage to STDERR
    # Takes in the @ARGV as input
    my @args = @_;
    for (@args) {
	if (/-?-h(elp)?/) {
	    die "$usage\n$description\n$options";
	}
    }
}

sub read_fasta {
    # Convert FASTA string into a hash with IDs for keys and sequences
    #  as values and stores the original order in an array
    # This subroutine requires three arguments:
	#	1) filehandle for the FASTA file
	#	2) a hash reference to store the sequences in
	#	3) an array reference to store the IDs in the same
	#          order as the original file 
    # If an ID line is present multiple times then a warning is printed
    #  to STDERR
    my ($hash, $list, $file) = @_;
    # Use STDIN if file is '-'
    $file = undef if $file && $file eq '-';
    my $in;
    if ($file && -e $file) {
	open $in, '<', $file || die $!;
    } else {
	$in = *STDIN;
    }
    # Store the sequence id
    my $seq_id;
    for (<$in>) {
        # Remove line endings
        s/\R//g;
	# Skip empty lines
	next if /^\s*$/;
	# Check wheter it is an id line
	if (/>(.*)/) {
	    # Save the id and the definition and store it in the array
	    $seq_id = $1;
	    print {*STDERR} "WARNING: <$seq_id> is present in multiple copies\n" if $hash->{$seq_id};
	    push @$list, $seq_id;
	} else {
	    # If there was no id lines before this then throw an error
	    unless (defined $seq_id) {
		print "Format error in FASTA file! Check the file!\n";
		last;
	    }
	    # Remove white space
	    s/\s+//g;
	    # Add to the sequence
	    $hash->{$seq_id} .= $_;
	}
    }
    close $in;
}
